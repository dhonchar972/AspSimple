@RestController
@RequestMapping(path="/api/tacos", produces="application/json")
@CrossOrigin(origins="http://tacocloud:8080") // CORS
public class TacoController {
    private TacoRepository tacoRepo;
    public TacoController(TacoRepository tacoRepo) {
        this.tacoRepo = tacoRepo;
    }
    @GetMapping(params="recent")
    public Iterable<Taco> recentTacos() {
        PageRequest page = PageRequest.of(0, 12, Sort.by("createdAt").descending());
        return tacoRepo.findAll(page).getContent();
    }
}

@GetMapping("/{id}")
public ResponseEntity<Taco> tacoById(@PathVariable("id") Long id) {
    Optional<Taco> optTaco = tacoRepo.findById(id);
    if (optTaco.isPresent()) {
        return new ResponseEntity<>(optTaco.get(), HttpStatus.OK);
    }
    return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
}

@PostMapping(consumes="application/json")
@ResponseStatus(HttpStatus.CREATED) // HTTP 201
public Taco postTaco(@RequestBody Taco taco) {
    return tacoRepo.save(taco);
}

@PutMapping(path="/{orderId}", consumes="application/json")
public TacoOrder putOrder(@PathVariable("orderId") Long orderId, @RequestBody TacoOrder order) {
    order.setId(orderId);
    return repo.save(order);
}



@Bean
public RestTemplate restTemplate() { // WebClient in WebFlux
    return new RestTemplate();
}

public Ingredient getIngredientById(String ingredientId) {
    return rest.getForObject("http://localhost:8080/ingredients/{id}", Ingredient.class, ingredientId);
}
public Ingredient getIngredientById(String ingredientId) {
    Map<String, String> urlVariables = new HashMap<>();
    urlVariables.put("id", ingredientId);
    return rest.getForObject("http://localhost:8080/ingredients/{id}", Ingredient.class, urlVariables);
}
public Ingredient getIngredientById(String ingredientId) {
    Map<String, String> urlVariables = new HashMap<>();
    urlVariables.put("id", ingredientId);
    URI url = UriComponentsBuilder.fromHttpUrl("http://localhost:8080/ingredients/{id}").build(urlVariables);
    return rest.getForObject(url, Ingredient.class);
}
public Ingredient getIngredientById(String ingredientId) {
    ResponseEntity<Ingredient> responseEntity = rest.getForEntity("http://localhost:8080/ingredients/{id}", Ingredient.class, ingredientId);
    log.info("Fetched time: {}", responseEntity.getHeaders().getDate());
    return responseEntity.getBody();
}



@RestController
@RequestMapping(path="/api/ingredients", produces="application/json")
@CrossOrigin(origins="http://localhost:8080")
public class IngredientController {

    private IngredientRepository repo;

    @Autowired
    public IngredientController(IngredientRepository repo) {
        this.repo = repo;
    }

    @GetMapping
    public Iterable<Ingredient> allIngredients() {
        return repo.findAll();
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Ingredient saveIngredient(@RequestBody Ingredient ingredient) {
        return repo.save(ingredient);
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteIngredient(@PathVariable("id") String ingredientId) {
        repo.deleteById(ingredientId);
    }
}

    @PostMapping
    @PreAuthorize("#{hasRole(‘ADMIN’)}")
    public Ingredient saveIngredient(@RequestBody Ingredient ingredient) {
        return repo.save(ingredient);
    }
    @DeleteMapping("/{id}")
    @PreAuthorize("#{hasRole(‘ADMIN’)}")
    public void deleteIngredient(@PathVariable("id") String ingredientId) {
        repo.deleteById(ingredientId);
    }
    /// OR ///
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers(HttpMethod.POST, "/ingredients").hasRole("ADMIN")
            .antMatchers(HttpMethod.DELETE, "/ingredients/**").hasRole("ADMIN")
            ...
    }

@EnableWebSecurity
public class SecurityConfig {
    @Bean
    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
        return http
            .authorizeRequests(authorizeRequests ->
                    authorizeRequests.anyRequest().authenticated())
            .formLogin()
            .and().build();
    }
    @Bean
    UserDetailsService userDetailsService(UserRepository userRepo) {
        return username -> userRepo.findByUsername(username);
    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

@Bean
public ApplicationRunner dataLoader(UserRepository repo, PasswordEncoder encoder) {
    return args -> {
        repo.save(new User("habuma", encoder.encode("password"), "ROLE_ADMIN"));
        repo.save(new User("tacochef", encoder.encode("password"), "ROLE_ADMIN"));
    };
}

@Configuration(proxyBeanMethods = false)
public class AuthorizationServerConfig {
    @Bean
    @Order(Ordered.HIGHEST_PRECEDENCE)
    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {
        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);
        return http
            .formLogin(Customizer.withDefaults())
            .build();
    }

    ...
}

@Bean
public RegisteredClientRepository registeredClientRepository(PasswordEncoder passwordEncoder) {
    RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())
        .clientId("taco-admin-client")
        .clientSecret(passwordEncoder.encode("secret"))
        .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
        .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)
        .redirectUri("http://127.0.0.1:9090/login/oauth2/code/taco-admin-client")
        .scope("writeIngredients")
        .scope("deleteIngredients")
        .scope(OidcScopes.OPENID)
        .clientSettings(clientSettings -> clientSettings.requireUserConsent(true))
        .build();

    return new InMemoryRegisteredClientRepository(registeredClient);
}

@Bean
public JWKSource<SecurityContext> jwkSource() throws NoSuchAlgorithmException {
    RSAKey rsaKey = generateRsa();
    JWKSet jwkSet = new JWKSet(rsaKey);
    return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);
}
private static RSAKey generateRsa() throws NoSuchAlgorithmException {
    KeyPair keyPair = generateRsaKey();
    RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
    return new RSAKey.Builder(publicKey)
        .privateKey(privateKey)
        .keyID(UUID.randomUUID().toString())
        .build();
}
private static KeyPair generateRsaKey() throws NoSuchAlgorithmException {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
    keyPairGenerator.initialize(2048);
    return keyPairGenerator.generateKeyPair();
}
@Bean
public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {
    return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);
}

spring:
    security:
        oauth2:
            resourceserver:
                jwt:
                    jwk-set-uri: http://localhost:9000/oauth2/jwks

@Bean
SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
	http
		.authorizeRequests(authorizeRequests -> authorizeRequests.anyRequest().authenticated())
		.oauth2Login(oauth2Login -> oauth2Login.loginPage("/oauth2/authorization/taco-admin-client"))
		.oauth2Client(withDefaults());

	return http.build();
}




@GetMapping(params="recent")
public Flux<Taco> recentTacos() {
	return Flux.fromIterable(tacoRepo.findAll()).take(12);
}


@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)
public class TacoControllerWebTest {
	@Autowired
		private WebTestClient testClient;
	}

	@SuppressWarnings("unchecked")
	@Test
	public void shouldSaveATaco() {
		TacoRepository tacoRepo = Mockito.mock(TacoRepository.class);

		WebTestClient testClient = WebTestClient.bindToController(new TacoController(tacoRepo)).build();

		Mono<Taco> unsavedTacoMono = Mono.just(testTaco(1L));
		Taco savedTaco = testTaco(1L);
		Flux<Taco> savedTacoMono = Flux.just(savedTaco);

		when(tacoRepo.saveAll(any(Mono.class))).thenReturn(savedTacoMono);

		testClient.post()
			.uri("/api/tacos")
			.contentType(MediaType.APPLICATION_JSON)
			.body(unsavedTacoMono, Taco.class)
			.exchange()
			.expectStatus().isCreated()
			.expectBody(Taco.class)
			.isEqualTo(savedTaco);
	}
}

Mono<Ingredient> ingredient = WebClient.create()
	.get()
	.uri("http://localhost:8080/ingredients/{id}", ingredientId)
	.retrieve()
	.bodyToMono(Ingredient.class);
Flux<Ingredient> ingredients = WebClient.create()
	.get()
	.uri("http://localhost:8080/ingredients")
	.retrieve()
	.bodyToFlux(Ingredient.class);

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
			.authorizeRequests()
			.antMatchers("/api/tacos", "/orders").hasAuthority("USER")
			.antMatchers("/**").permitAll();
	}
}
@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {
	@Bean
	public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {
		return http
			.authorizeExchange()
			.pathMatchers("/api/tacos", "/orders").hasAuthority("USER")
			.anyExchange().permitAll()
			.and()
			.build();
	}
}


@Entity
@TaЬle(name = "singer")
@NamedQueries({
    @NamedQuery(name=Singer.FIND_ALL, query="select s from Singer s"),
    @NamedQuery(name=Singer.COUNT_ALL, query="select count(s) from Singer s")
})
public class Singer implements Serializable {

    public static final String FIND_ALL = "Singer.findAll";
    public static final String COUNT ALL = "Singer.countAll";

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID")
    private Long id;

    @Version
    @Column(name = "VERSION")
    private int version;
    
    @Column(name = "FIRST_NAМE")
    private String firstName;
    @Column(name = "LAST NАМЕ")
    private String lastName;

    @Temporal(TemporalType.DATE)
    @Column(name = "ВIRTH_DATE")
    private Date birthDate;

    @OneToMany(mappedBy = "singer", cascade=CascadeType.ALL, orphanRemoval=true)
    private Set<Album> albums = new HashSet<>();

    ...
}

@Entity
@Table(name = "album")
public class Album implements Serializable {

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID")
    private Long id;

    @Version
    @Column(name = "VERSION")
    private int version;

    @Column
    private String title;

    @Temporal(TemporalType.DATE)
    @Column(name = "RELEASE_DATE")
    private Date releaseDate;

    @ManyToOne
    @JoinColumn(name = "SINGER_ID")
    private Singer singer;

    ...
}

@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages = "com.folder")
public class ServicesConfig {

    @Autowired
    EntityManagerFactory entityManagerFactory;

    @Bean
    public PlatformTransactionManager transactionManager() {
        return new JpaTransactionManager(entityManagerFactory);
    }
}

@Service("singerService")
@Transactional
puЫic class SingerServiceimpl implements SingerService {

    private SingerRepository singerRepository;

    @Autowired
    public void setSingerRepository(SingerRepository singerRepository) {
        this.singerRepository = singerRepository;
    }

    @Override
    @Transactional(readOnly = true)
    public List<Singer> findAll() {
        return Lists.newArrayList(singerRepository.findAll());
    }
}


@Component
@ConfigurationProperties(prefix="todo")
@Data
public class ToDoRestClientProperties { // POCO class
	private String url;
	private String basePath;
}
application.properties:
	todo.url=http://localhost:8080
	todo.base-path=/api/todo


@Service
public class ToDoRestClient { // REST_TEMPLATE

    private RestTemplate restTemplate;
    private ToDoRestClientProperties properties;

    public ToDoRestClient(ToDoRestClientProperties properties) {
        this.restTemplate = new RestTemplate();
        this.restTemplate.setErrorHandler(new ToDoErrorHandler());
        this.properties = properties;
    }

    public Iterable<ToDo> findAll() throws URISyntaxException {
        RequestEntity<Iterable<ToDo>> requestEntity = new RequestEntity<Iterable<ToDo>>(HttpMethod.GET,
                new URI(properties.getUrl() + properties.getBasePath()));

        ResponseEntity<Iterable<ToDo>> response = restTemplate.exchange(requestEntity, 
                new ParameterizedTypeReference<Iterable<ToDo>>(){});

        if (response.getStatusCode() == HttpStatus.OK)
            return response.getBody();

        return null;
    }

    public ToDo findById(String id) {
        Map<String, String> params = new HashMap<String, String>();
        params.put("id", id);
        return restTemplate.getForObject(properties.getUrl() + properties.getBasePath() + "/{id}",ToDo.class,params);
    }

    public ToDo upsert(ToDo toDo) throws URISyntaxException {
        RequestEntity<?> requestEntity = new RequestEntity<>(toDo, HttpMethod.POST, 
                new URI(properties.getUrl() + properties.getBasePath()));

        ResponseEntity<?> response = restTemplate.exchange(requestEntity, 
                new ParameterizedTypeReference<ToDo>() {});

        if (response.getStatusCode() == HttpStatus.CREATED)
            return restTemplate.getForObject(response.getHeaders().getLocation(),ToDo.class);

        return null;
    }

    public ToDo setCompleted(String id) throws URISyntaxException {
        Map<String, String> params = new HashMap<String, String>();
        params.put("id", id);

        restTemplate.postForObject(properties.getUrl() + properties.getBasePath() 
                + "/{id}?_method=patch",null,ResponseEntity.class, params);

        return findById(id);
    }

    public void delete(String id) {
        Map<String, String> params = new HashMap<String, String>();
        params.put("id", id);

        restTemplate.delete(properties.getUrl() + properties.getBasePath() + "/{id}", params);
    }
}

@Repository
public class ToDoRepository implements CommonRepository<ToDo> {

    private static final String SQL_INSERT = "insert into todo (id, description, created, modified, completed) values (:id,:description,:created,:modified,:completed)";
    private static final String SQL_QUERY_FIND_ALL = "select id, description, created, modified, completed from todo";
    private static final String SQL_QUERY_FIND_BY_ID = SQL_QUERY_FIND_ALL + "where id = :id";
    private static final String SQL_UPDATE = "update todo set description = :description, modified = :modified, completed = :completed where id = :id";
    private static final String SQL_DELETE = "delete from todo where id = :id";

    private final NamedParameterJdbcTemplate jdbcTemplate;

    public ToDoRepository(NamedParameterJdbcTemplate jdbcTemplate){
        this.jdbcTemplate = jdbcTemplate;
    }

    private RowMapper<ToDo> toDoRowMapper = (ResultSet rs, int rowNum) -> {
        ToDo toDo = new ToDo();
        toDo.setId(rs.getString("id"));
        toDo.setDescription(rs.getString("description"));
        toDo.setModified(rs.getTimestamp("modified").toLocalDateTime());
        toDo.setCreated(rs.getTimestamp("created").toLocalDateTime());
        toDo.setCompleted(rs.getBoolean("completed"));

        return toDo;
    };

    @Override
    public ToDo save(final ToDo domain) {
        ToDo result = findById(domain.getId());

        if (result != null) {
            result.setDescription(domain.getDescription());
            result.setCompleted(domain.isCompleted());
            result.setModified(LocalDateTime.now());
            return upsert(result, SQL_UPDATE);
        }

        return upsert(domain,SQL_INSERT);
    }

    private ToDo upsert(final ToDo toDo, final String sql) {
        Map<String, Object> namedParameters = new HashMap<>();
        namedParameters.put("id",toDo.getId());
        namedParameters.put("description",toDo.getDescription());
        namedParameters.put("created",java.sql.Timestamp.valueOf(toDo.getCreated()));
        namedParameters.put("modified",java.sql.Timestamp.valueOf(toDo.getModified()));
        namedParameters.put("completed",toDo.isCompleted());
        this.jdbcTemplate.update(sql,namedParameters);

        return findById(toDo.getId());
    }

    @Override
    public Iterable<ToDo> save(Collection<ToDo> domains) {
        domains.forEach( this::save);
        return findAll();
    }

    @Override
    public void delete(final ToDo domain) {
        Map<String, String> namedParameters = Collections.singletonMap("id", domain.getId());
        this.jdbcTemplate.update(SQL_DELETE,namedParameters);
    }

    @Override
    public ToDo findById(String id) {
        try {
            Map<String, String> namedParameters = Collections.singletonMap("id", id);
            return this.jdbcTemplate.queryForObject(SQL_QUERY_FIND_BY_ID, namedParameters, toDoRowMapper);
        } catch (EmptyResultDataAccessException ex) {
            return null;
        }
    }

    @Override
    public Iterable<ToDo> findAll() {
        return this.jdbcTemplate.query(SQL_QUERY_FIND_ALL, toDoRowMapper);
    }
}


    EmitterProcessor<ToDo> stream = EmitterProcessor.create();
    Flux<List<ToDo>> promise = stream
            .filter( s -> s.isCompleted())
            .doOnNext(s -> LOG.info("FLUX >>> ToDo: {}", s.getDescription()))
            .collectList()
            .subscribeOn(Schedulers.single());
            
    stream.onNext(new ToDo("Read a Book",true));
    stream.onNext(new ToDo("Listen Classical Music",true));
    stream.onNext(new ToDo("Workout in the Mornings"));
    stream.onNext(new ToDo("Organize my room", true));
    stream.onNext(new ToDo("Go to the Car Wash", true));
    stream.onNext(new ToDo("SP1 2018 is coming" , true));
    stream.onComplete();
    promise.block();


    WebClient client = WebClient.create("http://my-to-dos.com");
    Mono<ToDo> result = client
        .get()
        .uri("/todo/{id}", id)
        .accept(MediaType.APPLICATION_JSON)
        .retrieve()
        .bodyToMono(ToDo.class);
    Flux<ToDo> result = client
        .get()
        .uri("/todo").accept(MediaType.TEXT_EVENT_STREAM)
        .retrieve()
        .bodyToFlux(ToDo.class);


@Configuration
public class ToDoSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
            .passwordEncoder(passwordEncoder())
            .withUser("apress")
            .password(passwordEncoder().encode("springboot2"))
            .roles("ADMIN","USER");
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .requestMatchers(PathRequest
                .toStaticResources()
                .atCommonLocations()).permitAll()
            .anyRequest().fullyAuthenticated()
            .and()
            .formLogin().loginPage("/login").permitAll()
            .and()
            .logout()
            .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
            .logoutSuccessUrl("/login");
    }
}